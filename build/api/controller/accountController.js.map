{"version":3,"sources":["../../../src/api/controller/accountController.js"],"names":["AccountController","req","res","newAccount","body","createdAccount","AccountService","addNewAccount","json","status","data","oldAccount","accountNumber","params","accountInDb","dummyData","accounts","find","acc","updatedAccount","updateAnAccount","deleteAnAccount","message","allAccounts","fetchAllAccounts","account","fetchAnAccount"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;IAEMA,iB;;;;;;;;;iCACgBC,G,EAAKC,G,EAAK;AAC5B,UAAMC,UAAU,GAAGF,GAAG,CAACG,IAAvB;;AACA,UAAMC,cAAc,GAAGC,oBAAeC,aAAf,CAA6BJ,UAA7B,CAAvB;;AACA,aAAOD,GAAG,CAACM,IAAJ,CAAS;AACdC,QAAAA,MAAM,EAAE,GADM;AAEdC,QAAAA,IAAI,EAAEL;AAFQ,OAAT,CAAP;AAID;;;oCAEsBJ,G,EAAKC,G,EAAK;AAC/B,UAAMS,UAAU,GAAGV,GAAG,CAACG,IAAvB;AAD+B,UAEvBQ,aAFuB,GAELX,GAAG,CAACY,MAFC,CAEvBD,aAFuB;;AAG/B,UAAME,WAAW,GAAGC,sBAAUC,QAAV,CAAmBC,IAAnB,CAAwB,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACN,aAAJ,KAAsBA,aAA1B;AAAA,OAA3B,CAApB;;AACA,UAAI,CAACE,WAAL,EAAkB;AAChB,eAAOZ,GAAG,CAACM,IAAJ,CAAS;AACdC,UAAAA,MAAM,EAAE,GADM;AAEdC,UAAAA,IAAI,EAAE;AAFQ,SAAT,CAAP;AAID;;AACD,UAAMS,cAAc,GAAGb,oBAAec,eAAf,CAA+BT,UAA/B,EAA2CC,aAA3C,CAAvB;;AACA,aAAOV,GAAG,CAACM,IAAJ,CAAS;AACdC,QAAAA,MAAM,EAAE,GADM;AAEdC,QAAAA,IAAI,EAAES;AAFQ,OAAT,EAGJV,MAHI,CAGG,GAHH,CAAP;AAID;;;oCAEsBR,G,EAAKC,G,EAAK;AAAA,UACvBU,aADuB,GACLX,GAAG,CAACY,MADC,CACvBD,aADuB;;AAE/BN,0BAAee,eAAf,CAA+BT,aAA/B;;AACA,aAAOV,GAAG,CAACM,IAAJ,CAAS;AACdC,QAAAA,MAAM,EAAE,GADM;AAEda,QAAAA,OAAO,EAAE;AAFK,OAAT,EAGJb,MAHI,CAGG,GAHH,CAAP;AAID;;;qCAEuBR,G,EAAKC,G,EAAK;AAChC,UAAMqB,WAAW,GAAGjB,oBAAekB,gBAAf,EAApB;;AACA,aAAOtB,GAAG,CAACM,IAAJ,CAAS;AACdC,QAAAA,MAAM,EAAE,GADM;AAEdC,QAAAA,IAAI,EAAEa;AAFQ,OAAT,EAGJd,MAHI,CAGG,GAHH,CAAP;AAID;;;mCAEqBR,G,EAAKC,G,EAAK;AAAA,UACtBU,aADsB,GACJX,GAAG,CAACY,MADA,CACtBD,aADsB;;AAE9B,UAAMa,OAAO,GAAGnB,oBAAeoB,cAAf,CAA8Bd,aAA9B,CAAhB;;AAEA,aAAOV,GAAG,CAACM,IAAJ,CAAS;AACdC,QAAAA,MAAM,EAAE,GADM;AAEdC,QAAAA,IAAI,EAAEe;AAFQ,OAAT,EAGJhB,MAHI,CAGG,GAHH,CAAP;AAID;;;;;eAGYT,iB","sourcesContent":["import AccountService from '../services/account.service';\r\nimport dummyData from '../utilz/dummyData';\r\n\r\nclass AccountController {\r\n  static addAnAccount(req, res) {\r\n    const newAccount = req.body;\r\n    const createdAccount = AccountService.addNewAccount(newAccount);\r\n    return res.json({\r\n      status: 201,\r\n      data: createdAccount,\r\n    });\r\n  }\r\n\r\n  static updateAnAccount(req, res) {\r\n    const oldAccount = req.body;\r\n    const { accountNumber } = req.params;\r\n    const accountInDb = dummyData.accounts.find(acc => acc.accountNumber === accountNumber);\r\n    if (!accountInDb) {\r\n      return res.json({\r\n        status: 401,\r\n        data: 'The account number does not exist',\r\n      });\r\n    }\r\n    const updatedAccount = AccountService.updateAnAccount(oldAccount, accountNumber);\r\n    return res.json({\r\n      status: 201,\r\n      data: updatedAccount,\r\n    }).status(201);\r\n  }\r\n\r\n  static deleteAnAccount(req, res) {\r\n    const { accountNumber } = req.params;\r\n    AccountService.deleteAnAccount(accountNumber);\r\n    return res.json({\r\n      status: 201,\r\n      message: 'Account successfully deleted',\r\n    }).status(201);\r\n  }\r\n\r\n  static fetchAllAccounts(req, res) {\r\n    const allAccounts = AccountService.fetchAllAccounts();\r\n    return res.json({\r\n      status: 200,\r\n      data: allAccounts,\r\n    }).status(200);\r\n  }\r\n\r\n  static fetchAnAccount(req, res) {\r\n    const { accountNumber } = req.params;\r\n    const account = AccountService.fetchAnAccount(accountNumber);\r\n\r\n    return res.json({\r\n      status: 200,\r\n      data: account,\r\n    }).status(200);\r\n  }\r\n}\r\n\r\nexport default AccountController;\r\n"],"file":"accountController.js"}