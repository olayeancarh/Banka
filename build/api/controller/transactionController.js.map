{"version":3,"sources":["../../../src/api/controller/transactionController.js"],"names":["TransactionController","req","res","newTransaction","body","accountNumber","params","account","dummyData","accounts","find","acct","oldBalance","balance","type","amount","json","status","data","newBalance","createdTransaction","TransactionService","addNewTransaction","AccountService","updateAnAccount","allTransactions","fetchAllTransactions"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;IAEMA,qB;;;;;;;;;iCACgBC,G,EAAKC,G,EAAK;AAC5B,UAAMC,cAAc,GAAGF,GAAG,CAACG,IAA3B;AAD4B,UAEpBC,aAFoB,GAEFJ,GAAG,CAACK,MAFF,CAEpBD,aAFoB;;AAG5B,UAAME,OAAO,GAAGC,sBAAUC,QAAV,CAAmBC,IAAnB,CAAwB,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACN,aAAL,KAAuBA,aAA3B;AAAA,OAA5B,CAAhB;;AACAF,MAAAA,cAAc,CAACS,UAAf,GAA4BL,OAAO,CAACM,OAApC;AACAV,MAAAA,cAAc,CAACW,IAAf,GAAsB,OAAtB;;AACA,UAAIX,cAAc,CAACY,MAAf,GAAwBZ,cAAc,CAACS,UAA3C,EAAuD;AACrD,eAAOV,GAAG,CAACc,IAAJ,CAAS;AACdC,UAAAA,MAAM,EAAE,GADM;AAEdC,UAAAA,IAAI,EAAE;AAFQ,SAAT,CAAP;AAID;;AACDf,MAAAA,cAAc,CAACgB,UAAf,GAA4BhB,cAAc,CAACS,UAAf,GAA4BT,cAAc,CAACY,MAAvE;AACAR,MAAAA,OAAO,CAACM,OAAR,GAAkBV,cAAc,CAACgB,UAAjC;;AACA,UAAMC,kBAAkB,GAAGC,wBAAmBC,iBAAnB,CAAqCnB,cAArC,CAA3B;;AACAoB,0BAAeC,eAAf,CAA+BjB,OAA/B,EAAwCF,aAAxC;;AACA,aAAOH,GAAG,CAACc,IAAJ,CAAS;AACdC,QAAAA,MAAM,EAAE,GADM;AAEdC,QAAAA,IAAI,EAAEE;AAFQ,OAAT,CAAP;AAID;;;kCAEoBnB,G,EAAKC,G,EAAK;AAC7B,UAAMC,cAAc,GAAGF,GAAG,CAACG,IAA3B;AAD6B,UAErBC,aAFqB,GAEHJ,GAAG,CAACK,MAFD,CAErBD,aAFqB;;AAG7B,UAAME,OAAO,GAAGC,sBAAUC,QAAV,CAAmBC,IAAnB,CAAwB,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACN,aAAL,KAAuBA,aAA3B;AAAA,OAA5B,CAAhB;;AACAF,MAAAA,cAAc,CAACS,UAAf,GAA4BL,OAAO,CAACM,OAApC;AACAV,MAAAA,cAAc,CAACW,IAAf,GAAsB,QAAtB;AACAX,MAAAA,cAAc,CAACgB,UAAf,GAA4BhB,cAAc,CAACS,UAAf,GAA4BT,cAAc,CAACY,MAAvE;AACAR,MAAAA,OAAO,CAACM,OAAR,GAAkBV,cAAc,CAACgB,UAAjC;;AACA,UAAMC,kBAAkB,GAAGC,wBAAmBC,iBAAnB,CAAqCnB,cAArC,CAA3B;;AACAoB,0BAAeC,eAAf,CAA+BjB,OAA/B,EAAwCF,aAAxC;;AACA,aAAOH,GAAG,CAACc,IAAJ,CAAS;AACdC,QAAAA,MAAM,EAAE,GADM;AAEdC,QAAAA,IAAI,EAAEE;AAFQ,OAAT,CAAP;AAID;;;yCAE2BnB,G,EAAKC,G,EAAK;AACpC,UAAMuB,eAAe,GAAGJ,wBAAmBK,oBAAnB,EAAxB;;AACA,aAAOxB,GAAG,CAACc,IAAJ,CAAS;AACdC,QAAAA,MAAM,EAAE,GADM;AAEdC,QAAAA,IAAI,EAAEO;AAFQ,OAAT,EAGJR,MAHI,CAGG,GAHH,CAAP;AAID;;;;;eAGYjB,qB","sourcesContent":["import TransactionService from '../services/transaction.service';\r\nimport AccountService from '../services/account.service';\r\nimport dummyData from '../utilz/dummyData';\r\n\r\nclass TransactionController {\r\n  static debitAccount(req, res) {\r\n    const newTransaction = req.body;\r\n    const { accountNumber } = req.params;\r\n    const account = dummyData.accounts.find(acct => acct.accountNumber === accountNumber);\r\n    newTransaction.oldBalance = account.balance;\r\n    newTransaction.type = 'debit';\r\n    if (newTransaction.amount > newTransaction.oldBalance) {\r\n      return res.json({\r\n        status: 201,\r\n        data: 'Insufficient funds',\r\n      });\r\n    }\r\n    newTransaction.newBalance = newTransaction.oldBalance - newTransaction.amount;\r\n    account.balance = newTransaction.newBalance;\r\n    const createdTransaction = TransactionService.addNewTransaction(newTransaction);\r\n    AccountService.updateAnAccount(account, accountNumber);\r\n    return res.json({\r\n      status: 201,\r\n      data: createdTransaction,\r\n    });\r\n  }\r\n\r\n  static creditAccount(req, res) {\r\n    const newTransaction = req.body;\r\n    const { accountNumber } = req.params;\r\n    const account = dummyData.accounts.find(acct => acct.accountNumber === accountNumber);\r\n    newTransaction.oldBalance = account.balance;\r\n    newTransaction.type = 'credit';\r\n    newTransaction.newBalance = newTransaction.oldBalance + newTransaction.amount;\r\n    account.balance = newTransaction.newBalance;\r\n    const createdTransaction = TransactionService.addNewTransaction(newTransaction);\r\n    AccountService.updateAnAccount(account, accountNumber);\r\n    return res.json({\r\n      status: 201,\r\n      data: createdTransaction,\r\n    });\r\n  }\r\n\r\n  static fetchAllTransactions(req, res) {\r\n    const allTransactions = TransactionService.fetchAllTransactions();\r\n    return res.json({\r\n      status: 200,\r\n      data: allTransactions,\r\n    }).status(200);\r\n  }\r\n}\r\n\r\nexport default TransactionController;\r\n"],"file":"transactionController.js"}