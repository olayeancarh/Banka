{"version":3,"sources":["../../../src/api/controller/userController.js"],"names":["UserController","req","res","newUser","body","helpers","userSignup","status","json","data","validator","validate","email","bcrypt","hash","password","config","saltRounds","err","createdUser","UserService","addNewUser","then","user","routine","jwt","sign","secret","_err","token","rows","userSignin","userLogIn","compare","resp"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\r\n/* eslint-disable consistent-return */\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcryptjs';\r\nimport validator from 'email-validator';\r\nimport UserService from '../services/user.service';\r\nimport config from '../utilz/config';\r\nimport helpers from '../utilz/helpers';\r\n\r\nclass UserController {\r\n  static addAUser(req, res) {\r\n    const newUser = req.body;\r\n    if (!helpers.userSignup(newUser)) return res.status(401).json({ status: 401, data: 'Some fields are missing' });\r\n    if (!validator.validate(newUser.email)) return res.status(401).json({ status: 401, data: 'Invalid email' });\r\n    bcrypt.hash(newUser.password, config.saltRounds, (err, hash) => {\r\n      newUser.password = hash;\r\n      const createdUser = UserService.addNewUser(newUser);\r\n      createdUser.then((user) => {\r\n        if (user.routine === '_bt_check_unique') {\r\n          return res.status(401).json({ status: 401, data: 'Email already exists' });\r\n        }\r\n        jwt.sign({ email: newUser.email }, config.secret, (_err, token) => {\r\n          // eslint-disable-next-line no-param-reassign\r\n          user.rows[0].token = token;\r\n          return res.status(201).json({ status: 201, data: user.rows[0] });\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  static userLogin(req, res) {\r\n    // let myToken;\r\n    const {\r\n      email, password,\r\n    } = req.body;\r\n    if (!helpers.userSignin(email, password)) return res.status(401).json({ status: 401, data: 'Some fields are missing' });\r\n    if (!validator.validate(email)) return res.status(401).json({ status: 401, data: 'Invalid email' });\r\n    UserService.userLogIn(email)\r\n      .then((user) => {\r\n        if (!user.rows[0]) {\r\n          return res.status(404).json({\r\n            status: 404,\r\n            data: 'Authenticaation failed',\r\n          });\r\n        }\r\n        bcrypt.compare(password, user.rows[0].password).then((resp) => {\r\n          if (!resp) {\r\n            return res.status(404).json({\r\n              status: 404,\r\n              data: 'Login failed',\r\n            });\r\n          }\r\n          jwt.sign({ email }, config.secret, (err, token) => {\r\n            // eslint-disable-next-line no-param-reassign\r\n            user.rows[0].token = token;\r\n            return res.status(201).json({\r\n              status: 201,\r\n              data: user.rows[0],\r\n            });\r\n          });\r\n        });\r\n      });\r\n  }\r\n}\r\n\r\nexport default UserController;\r\n"],"file":"userController.js"}