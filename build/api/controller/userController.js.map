{"version":3,"sources":["../../../src/api/controller/userController.js"],"names":["UserController","req","res","newUser","body","email","firstName","lastName","password","type","isAdmin","includes","status","json","data","validator","validate","bcrypt","hash","config","saltRounds","err","createdUser","UserService","addNewUser","then","user","routine","rows","loggedInUser","userLogIn","compare","resp","jwt","sign","secret","token"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\r\n/* eslint-disable consistent-return */\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\nimport validator from 'email-validator';\r\nimport UserService from '../services/user.service';\r\nimport config from '../utilz/config';\r\n\r\nclass UserController {\r\n  static addAUser(req, res) {\r\n    const newUser = req.body;\r\n    if ([newUser.email, newUser.firstName, newUser.lastName, newUser.password, newUser.type, newUser.isAdmin].includes('')) {\r\n      return res.status(401).json({\r\n        status: 401,\r\n        data: 'All fields are required',\r\n      });\r\n    }\r\n    if (!validator.validate(newUser.email)) {\r\n      return res.status(401).json({\r\n        status: 401,\r\n        data: 'Invalid Email',\r\n      });\r\n    }\r\n    bcrypt.hash(newUser.password, config.saltRounds, (err, hash) => {\r\n      newUser.password = hash;\r\n      const createdUser = UserService.addNewUser(newUser);\r\n      createdUser.then((user) => {\r\n        if (user.routine === '_bt_check_unique') {\r\n          return res.status(401).json({ status: 401, data: 'Email already exists' });\r\n        }\r\n        return res.status(201).json({ status: 201, data: user.rows[0] });\r\n      });\r\n    });\r\n  }\r\n\r\n  static userLogin(req, res) {\r\n    // let myToken;\r\n    const {\r\n      email, password,\r\n    } = req.body;\r\n    if (!validator.validate(email) || [email, password].includes('')) {\r\n      const data = !validator.validate(email) ? 'Invalid email' : 'Some fields are missing';\r\n      return res.status(401).json({\r\n        status: 401,\r\n        data,\r\n      });\r\n    }\r\n    const loggedInUser = UserService.userLogIn(email);\r\n    loggedInUser.then((user) => {\r\n      if (!user.rows[0]) {\r\n        return res.status(404).json({\r\n          status: 404,\r\n          data: 'Authenticaation failed',\r\n        });\r\n      }\r\n      bcrypt.compare(password, user.rows[0].password).then((resp) => {\r\n        if (!resp) {\r\n          return res.status(404).json({\r\n            status: 404,\r\n            data: 'Login failed',\r\n          });\r\n        }\r\n        jwt.sign({ email }, config.secret, (err, token) => {\r\n          // eslint-disable-next-line no-param-reassign\r\n          user.rows[0].token = token;\r\n          return res.status(201).json({\r\n            status: 201,\r\n            data: user.rows[0],\r\n          });\r\n        });\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport default UserController;\r\n"],"file":"userController.js"}