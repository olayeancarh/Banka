{"version":3,"sources":["../../../src/api/controller/userController.js"],"names":["UserController","req","res","newUser","body","emailExists","dummyData","users","find","email","saltRounds","json","status","data","firstName","lastName","password","includes","bcrypt","hash","err","createdUser","UserService","addNewUser","user","compare","then","resp","jwt","sign","config","secret","token"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;IAEMA,c;;;;;;;;;6BACYC,G,EAAKC,G,EAAK;AACxB,UAAMC,OAAO,GAAGF,GAAG,CAACG,IAApB;;AACA,UAAMC,WAAW,GAAGC,sBAAUC,KAAV,CAAgBC,IAAhB,CAAqB,UAAAD,KAAK;AAAA,eAAIA,KAAK,CAACE,KAAN,KAAgBN,OAAO,CAACM,KAA5B;AAAA,OAA1B,CAApB;;AACA,UAAMC,UAAU,GAAG,EAAnB;;AACA,UAAIL,WAAJ,EAAiB;AACf,eAAOH,GAAG,CAACS,IAAJ,CAAS;AACdC,UAAAA,MAAM,EAAE,GADM;AAEdC,UAAAA,IAAI,EAAE;AAFQ,SAAT,CAAP;AAID;;AACD,UAAI,CAACV,OAAO,CAACM,KAAT,EAAgBN,OAAO,CAACW,SAAxB,EAAmCX,OAAO,CAACY,QAA3C,EAAqDZ,OAAO,CAACa,QAA7D,EAAuEC,QAAvE,CAAgF,EAAhF,CAAJ,EAAyF;AACvF,eAAOf,GAAG,CAACS,IAAJ,CAAS;AACdC,UAAAA,MAAM,EAAE,GADM;AAEdC,UAAAA,IAAI,EAAE;AAFQ,SAAT,CAAP;AAID;;AACDK,yBAAOC,IAAP,CAAYhB,OAAO,CAACa,QAApB,EAA8BN,UAA9B,EAA0C,UAACU,GAAD,EAAMD,IAAN,EAAe;AACvDhB,QAAAA,OAAO,CAACa,QAAR,GAAmBG,IAAnB;;AACA,YAAME,WAAW,GAAGC,iBAAYC,UAAZ,CAAuBpB,OAAvB,CAApB,CAFuD,CAGvD;;;AACA,eAAOD,GAAG,CAACS,IAAJ,CAAS;AACdC,UAAAA,MAAM,EAAE,GADM;AAEdC,UAAAA,IAAI,EAAEQ;AAFQ,SAAT,CAAP;AAID,OARD;AASD;;;8BAEgBpB,G,EAAKC,G,EAAK;AACzB;AADyB,sBAIrBD,GAAG,CAACG,IAJiB;AAAA,UAGvBK,KAHuB,aAGvBA,KAHuB;AAAA,UAGhBO,QAHgB,aAGhBA,QAHgB;;AAKzB,UAAMX,WAAW,GAAGC,sBAAUC,KAAV,CAAgBC,IAAhB,CAAqB,UAAAgB,IAAI;AAAA,eAAIA,IAAI,CAACf,KAAL,KAAeA,KAAnB;AAAA,OAAzB,CAApB;;AACA,UAAI,CAACJ,WAAL,EAAkB;AAChB,eAAOH,GAAG,CAACS,IAAJ,CAAS;AACdC,UAAAA,MAAM,EAAE,GADM;AAEdC,UAAAA,IAAI,EAAE;AAFQ,SAAT,CAAP;AAID;;AACDK,yBAAOO,OAAP,CAAeT,QAAf,EAAyBX,WAAW,CAACW,QAArC,EAA+CU,IAA/C,CAAoD,UAACC,IAAD,EAAU;AAC5D,YAAI,CAACA,IAAL,EAAW;AACT,iBAAOzB,GAAG,CAACS,IAAJ,CAAS;AACdC,YAAAA,MAAM,EAAE,GADM;AAEdC,YAAAA,IAAI,EAAE;AAFQ,WAAT,CAAP;AAID;;AACDe,iCAAIC,IAAJ,CAAS;AAAEpB,UAAAA,KAAK,EAALA;AAAF,SAAT,EAAoBqB,mBAAOC,MAA3B,EAAmC,UAACX,GAAD,EAAMY,KAAN,EAAgB;AACjD3B,UAAAA,WAAW,CAAC2B,KAAZ,GAAoBA,KAApB;AACA3B,UAAAA,WAAW,CAACW,QAAZ,GAAuB,EAAvB;AACA,iBAAOd,GAAG,CAACS,IAAJ,CAAS;AACdC,YAAAA,MAAM,EAAE,GADM;AAEdC,YAAAA,IAAI,EAAER;AAFQ,WAAT,CAAP;AAID,SAPD;AAQD,OAfD;AAgBD;;;;;;eAGYL,c","sourcesContent":["/* eslint-disable consistent-return */\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\nimport UserService from '../services/user.service';\r\nimport dummyData from '../utilz/dummyData';\r\nimport config from '../utilz/config';\r\n\r\nclass UserController {\r\n  static addAUser(req, res) {\r\n    const newUser = req.body;\r\n    const emailExists = dummyData.users.find(users => users.email === newUser.email);\r\n    const saltRounds = 10;\r\n    if (emailExists) {\r\n      return res.json({\r\n        status: 401,\r\n        data: 'This email is associated with a Banka account',\r\n      });\r\n    }\r\n    if ([newUser.email, newUser.firstName, newUser.lastName, newUser.password].includes('')) {\r\n      return res.json({\r\n        status: 401,\r\n        data: 'All fields are required',\r\n      });\r\n    }\r\n    bcrypt.hash(newUser.password, saltRounds, (err, hash) => {\r\n      newUser.password = hash;\r\n      const createdUser = UserService.addNewUser(newUser);\r\n      // createdUser.password = '';\r\n      return res.json({\r\n        status: 201,\r\n        data: createdUser,\r\n      });\r\n    });\r\n  }\r\n\r\n  static userLogin(req, res) {\r\n    // let myToken;\r\n    const {\r\n      email, password,\r\n    } = req.body;\r\n    const emailExists = dummyData.users.find(user => user.email === email);\r\n    if (!emailExists) {\r\n      return res.json({\r\n        status: 404,\r\n        data: 'Authentication failed',\r\n      });\r\n    }\r\n    bcrypt.compare(password, emailExists.password).then((resp) => {\r\n      if (!resp) {\r\n        return res.json({\r\n          status: 404,\r\n          data: 'Login failed',\r\n        });\r\n      }\r\n      jwt.sign({ email }, config.secret, (err, token) => {\r\n        emailExists.token = token;\r\n        emailExists.password = '';\r\n        return res.json({\r\n          status: 201,\r\n          data: emailExists,\r\n        });\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport default UserController;\r\n"],"file":"userController.js"}