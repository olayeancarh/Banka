{"version":3,"sources":["../../../src/api/db/index.js"],"names":["require","Pool","pool","user","host","database","password","port","on","console","log","createUserTable","queryText","query","then","res","end","err","createAccountTable","createTransactionTable","dropUserTable","dropAccountTable","dropTransactionTable","createAllTables","dropAllTables","process","exit","module","exports"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\r\nconst { Pool } = require('pg');\r\n\r\nconst pool = new Pool({\r\n  user: 'postgres',\r\n  host: '127.0.0.1',\r\n  database: 'banka',\r\n  password: 'admins',\r\n  port: 5432,\r\n});\r\n\r\npool.on('connect', () => {\r\n  console.log('connected to the db');\r\n});\r\n\r\n/**\r\n * Create User Table\r\n */\r\nconst createUserTable = () => {\r\n  const queryText = `CREATE TABLE IF NOT EXISTS\r\n    Users(\r\n      id UUID PRIMARY KEY,\r\n      email VARCHAR(120) UNIQUE NOT NULL,\r\n      firstName VARCHAR(120) NOT NULL,\r\n      lastName VARCHAR(120) NOT NULL,\r\n      password VARCHAR(120) NOT NULL,\r\n      type VARCHAR(120) NOT NULL,\r\n      isAdmin boolean NOT NULL,\r\n      createdOn TIMESTAMP NOT NULL,\r\n      last_login TIMESTAMP\r\n    )`;\r\n\r\n  pool.query(queryText)\r\n    .then((res) => {\r\n      console.log(res);\r\n      pool.end();\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      pool.end();\r\n    });\r\n};\r\n\r\n/**\r\n * Create Accounts Table\r\n */\r\nconst createAccountTable = () => {\r\n  const queryText = `CREATE TABLE IF NOT EXISTS\r\n    Accounts(\r\n      id UUID PRIMARY KEY,\r\n      accountNumber VARCHAR(120) UNIQUE NOT NULL,\r\n      owner UUID NOT NULL,\r\n      type VARCHAR(50) NOT NULL,\r\n      status VARCHAR(50) NOT NULL,\r\n      balance float NOT NULL,\r\n      createdOn TIMESTAMP NOT NULL,\r\n      updatedOn TIMESTAMP,\r\n      FOREIGN KEY (owner) REFERENCES Users (id) ON DELETE CASCADE\r\n    )`;\r\n\r\n  pool.query(queryText)\r\n    .then((res) => {\r\n      console.log(res);\r\n      pool.end();\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      pool.end();\r\n    });\r\n};\r\n\r\n/**\r\n * Create Accounts Table\r\n */\r\nconst createTransactionTable = () => {\r\n  const queryText = `CREATE TABLE IF NOT EXISTS\r\n    Transactions(\r\n      id UUID PRIMARY KEY,\r\n      accountNumber VARCHAR(120) NOT NULL,\r\n      cashier UUID NOT NULL,\r\n      type VARCHAR(50) NOT NULL,\r\n      amount float NOT NULL,\r\n      oldBalance float NOT NULL,\r\n      newBalance float NOT NULL,\r\n      createdOn TIMESTAMP NOT NULL,\r\n      updatedOn TIMESTAMP,\r\n      FOREIGN KEY (cashier) REFERENCES Users (id) ON DELETE CASCADE,\r\n      FOREIGN KEY (accountNumber) REFERENCES Accounts (accountNumber) ON DELETE CASCADE\r\n    )`;\r\n\r\n  pool.query(queryText)\r\n    .then((res) => {\r\n      console.log(res);\r\n      pool.end();\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      pool.end();\r\n    });\r\n};\r\n\r\n/**\r\n * Drop UserTable\r\n */\r\nconst dropUserTable = () => {\r\n  const queryText = 'DROP TABLE IF EXISTS users returning *';\r\n  pool.query(queryText)\r\n    .then((res) => {\r\n      console.log(res);\r\n      pool.end();\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      pool.end();\r\n    });\r\n};\r\n\r\n/**\r\n * Drop AccountTable\r\n */\r\nconst dropAccountTable = () => {\r\n  const queryText = 'DROP TABLE IF EXISTS Accounts returning *';\r\n  pool.query(queryText)\r\n    .then((res) => {\r\n      console.log(res);\r\n      pool.end();\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      pool.end();\r\n    });\r\n};\r\n\r\n/**\r\n * Drop AccountTable\r\n */\r\nconst dropTransactionTable = () => {\r\n  const queryText = 'DROP TABLE IF EXISTS Transactions returning *';\r\n  pool.query(queryText)\r\n    .then((res) => {\r\n      console.log(res);\r\n      pool.end();\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      pool.end();\r\n    });\r\n};\r\n\r\n/**\r\n * Create All Tables\r\n */\r\nconst createAllTables = () => {\r\n  createUserTable();\r\n  createAccountTable();\r\n  createTransactionTable();\r\n};\r\n/**\r\n * Drop All Tables\r\n */\r\nconst dropAllTables = () => {\r\n  dropUserTable();\r\n  dropAccountTable();\r\n  dropTransactionTable();\r\n};\r\n\r\npool.on('remove', () => {\r\n  console.log('client removed');\r\n  process.exit(0);\r\n});\r\n\r\nmodule.exports = {\r\n  createUserTable,\r\n  createAccountTable,\r\n  createTransactionTable,\r\n  createAllTables,\r\n  dropUserTable,\r\n  dropAllTables,\r\n};\r\n\r\nrequire('make-runnable');\r\n"],"file":"index.js"}